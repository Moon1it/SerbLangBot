// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	models "github.com/Moon1it/SerbLangBot/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUser) Create(newUser *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", newUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserMockRecorder) Create(newUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUser)(nil).Create), newUser)
}

// GetByChatID mocks base method.
func (m *MockUser) GetByChatID(chatID int64) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByChatID", chatID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByChatID indicates an expected call of GetByChatID.
func (mr *MockUserMockRecorder) GetByChatID(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByChatID", reflect.TypeOf((*MockUser)(nil).GetByChatID), chatID)
}

// GetStatsByChatID mocks base method.
func (m *MockUser) GetStatsByChatID(chatID int64) (*models.UserStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatsByChatID", chatID)
	ret0, _ := ret[0].(*models.UserStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatsByChatID indicates an expected call of GetStatsByChatID.
func (mr *MockUserMockRecorder) GetStatsByChatID(chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatsByChatID", reflect.TypeOf((*MockUser)(nil).GetStatsByChatID), chatID)
}

// UpdateActiveExercise mocks base method.
func (m *MockUser) UpdateActiveExercise(chatID int64, activeExercise *models.Exercise) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveExercise", chatID, activeExercise)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActiveExercise indicates an expected call of UpdateActiveExercise.
func (mr *MockUserMockRecorder) UpdateActiveExercise(chatID, activeExercise interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveExercise", reflect.TypeOf((*MockUser)(nil).UpdateActiveExercise), chatID, activeExercise)
}

// UpdateTopicProgress mocks base method.
func (m *MockUser) UpdateTopicProgress(chatID, topicID int64, topicProgress *models.TopicStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopicProgress", chatID, topicID, topicProgress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTopicProgress indicates an expected call of UpdateTopicProgress.
func (mr *MockUserMockRecorder) UpdateTopicProgress(chatID, topicID, topicProgress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopicProgress", reflect.TypeOf((*MockUser)(nil).UpdateTopicProgress), chatID, topicID, topicProgress)
}

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// GetServiceMessage mocks base method.
func (m *MockMessage) GetServiceMessage(name string) (*models.ServiceMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceMessage", name)
	ret0, _ := ret[0].(*models.ServiceMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceMessage indicates an expected call of GetServiceMessage.
func (mr *MockMessageMockRecorder) GetServiceMessage(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceMessage", reflect.TypeOf((*MockMessage)(nil).GetServiceMessage), name)
}

// MockTopic is a mock of Topic interface.
type MockTopic struct {
	ctrl     *gomock.Controller
	recorder *MockTopicMockRecorder
}

// MockTopicMockRecorder is the mock recorder for MockTopic.
type MockTopicMockRecorder struct {
	mock *MockTopic
}

// NewMockTopic creates a new mock instance.
func NewMockTopic(ctrl *gomock.Controller) *MockTopic {
	mock := &MockTopic{ctrl: ctrl}
	mock.recorder = &MockTopicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTopic) EXPECT() *MockTopicMockRecorder {
	return m.recorder
}

// GetAllTopics mocks base method.
func (m *MockTopic) GetAllTopics() ([]models.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTopics")
	ret0, _ := ret[0].([]models.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTopics indicates an expected call of GetAllTopics.
func (mr *MockTopicMockRecorder) GetAllTopics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTopics", reflect.TypeOf((*MockTopic)(nil).GetAllTopics))
}

// GetTopicsCount mocks base method.
func (m *MockTopic) GetTopicsCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicsCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicsCount indicates an expected call of GetTopicsCount.
func (mr *MockTopicMockRecorder) GetTopicsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicsCount", reflect.TypeOf((*MockTopic)(nil).GetTopicsCount))
}

// MockExercise is a mock of Exercise interface.
type MockExercise struct {
	ctrl     *gomock.Controller
	recorder *MockExerciseMockRecorder
}

// MockExerciseMockRecorder is the mock recorder for MockExercise.
type MockExerciseMockRecorder struct {
	mock *MockExercise
}

// NewMockExercise creates a new mock instance.
func NewMockExercise(ctrl *gomock.Controller) *MockExercise {
	mock := &MockExercise{ctrl: ctrl}
	mock.recorder = &MockExerciseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExercise) EXPECT() *MockExerciseMockRecorder {
	return m.recorder
}

// GetAnswerByQuestion mocks base method.
func (m *MockExercise) GetAnswerByQuestion(question string) (*models.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerByQuestion", question)
	ret0, _ := ret[0].(*models.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerByQuestion indicates an expected call of GetAnswerByQuestion.
func (mr *MockExerciseMockRecorder) GetAnswerByQuestion(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerByQuestion", reflect.TypeOf((*MockExercise)(nil).GetAnswerByQuestion), question)
}

// GetByTopic mocks base method.
func (m *MockExercise) GetByTopic(topicName string) (*models.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTopic", topicName)
	ret0, _ := ret[0].(*models.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTopic indicates an expected call of GetByTopic.
func (mr *MockExerciseMockRecorder) GetByTopic(topicName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTopic", reflect.TypeOf((*MockExercise)(nil).GetByTopic), topicName)
}
